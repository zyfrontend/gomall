// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserLoginLogDao is the data access object for table kcode_user_login_log.
type KcodeUserLoginLogDao struct {
	table   string                   // table is the underlying table name of the DAO.
	group   string                   // group is the database configuration group name of current DAO.
	columns KcodeUserLoginLogColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserLoginLogColumns defines and stores column names for table kcode_user_login_log.
type KcodeUserLoginLogColumns struct {
	LogId        string // 自动编号log_id
	UserId       string // 用户User_id
	Username     string // 登录用户名字
	LoginTime    string // 登录时间
	LoginIp      string // 登录IP地址
	LoginType    string // 登录类型
	LoginOs      string // 登录系统信息
	LoginBrowser string //
	LoginMsg     string // 登录提示信息
	Status       string //
}

// kcodeUserLoginLogColumns holds the columns for table kcode_user_login_log.
var kcodeUserLoginLogColumns = KcodeUserLoginLogColumns{
	LogId:        "log_id",
	UserId:       "user_id",
	Username:     "username",
	LoginTime:    "login_time",
	LoginIp:      "login_ip",
	LoginType:    "login_type",
	LoginOs:      "login_os",
	LoginBrowser: "login_browser",
	LoginMsg:     "login_msg",
	Status:       "status",
}

// NewKcodeUserLoginLogDao creates and returns a new DAO object for table data access.
func NewKcodeUserLoginLogDao() *KcodeUserLoginLogDao {
	return &KcodeUserLoginLogDao{
		group:   "default",
		table:   "kcode_user_login_log",
		columns: kcodeUserLoginLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserLoginLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserLoginLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserLoginLogDao) Columns() KcodeUserLoginLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserLoginLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserLoginLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserLoginLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
