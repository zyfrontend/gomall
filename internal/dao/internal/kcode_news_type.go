// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeNewsTypeDao is the data access object for table kcode_news_type.
type KcodeNewsTypeDao struct {
	table   string               // table is the underlying table name of the DAO.
	group   string               // group is the database configuration group name of current DAO.
	columns KcodeNewsTypeColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeNewsTypeColumns defines and stores column names for table kcode_news_type.
type KcodeNewsTypeColumns struct {
	Id          string //
	Name        string // 分类名称
	Pid         string // 父id
	Status      string // 状态 0 不显示  1显示
	Sort        string // 排序序号
	SeoTitle    string // seo
	Keywords    string // keywords
	Description string // description
	Path        string // 节点
	Pic         string // 图片
}

// kcodeNewsTypeColumns holds the columns for table kcode_news_type.
var kcodeNewsTypeColumns = KcodeNewsTypeColumns{
	Id:          "id",
	Name:        "name",
	Pid:         "pid",
	Status:      "status",
	Sort:        "sort",
	SeoTitle:    "seo_title",
	Keywords:    "keywords",
	Description: "description",
	Path:        "path",
	Pic:         "pic",
}

// NewKcodeNewsTypeDao creates and returns a new DAO object for table data access.
func NewKcodeNewsTypeDao() *KcodeNewsTypeDao {
	return &KcodeNewsTypeDao{
		group:   "default",
		table:   "kcode_news_type",
		columns: kcodeNewsTypeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeNewsTypeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeNewsTypeDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeNewsTypeDao) Columns() KcodeNewsTypeColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeNewsTypeDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeNewsTypeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeNewsTypeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
