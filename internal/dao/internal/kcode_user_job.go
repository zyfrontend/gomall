// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserJobDao is the data access object for table kcode_user_job.
type KcodeUserJobDao struct {
	table   string              // table is the underlying table name of the DAO.
	group   string              // group is the database configuration group name of current DAO.
	columns KcodeUserJobColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserJobColumns defines and stores column names for table kcode_user_job.
type KcodeUserJobColumns struct {
	GroupId          string // 级别id
	GroupName        string // 级别名称
	Zhituibili       string // 直推比例
	GroupNameEn      string // 级别名称
	ContentEn        string // 内容
	Price            string // 节点价格
	UsdtBonus        string // 节点分红余额
	EndBonusTime     string // 最后分红时间
	Num              string // 名额人数
	Content          string // 内容
	Count            string // 已购买数量
	InvestMoney      string // 质押金额
	NetworkBonus     string // 全网加权分红百分比
	EquityBonus      string // 权益分红百分比
	OldGroupId       string //
	Logo             string //
	NetworkBonusPond string // 全网加权分红池子
	EquityBonusPond  string // 权益分红池子
	PjBonus          string // 平级奖
	Status           string // 1开放0不开放
}

// kcodeUserJobColumns holds the columns for table kcode_user_job.
var kcodeUserJobColumns = KcodeUserJobColumns{
	GroupId:          "group_id",
	GroupName:        "group_name",
	Zhituibili:       "zhituibili",
	GroupNameEn:      "group_name_en",
	ContentEn:        "content_en",
	Price:            "price",
	UsdtBonus:        "usdt_bonus",
	EndBonusTime:     "end_bonus_time",
	Num:              "num",
	Content:          "content",
	Count:            "count",
	InvestMoney:      "invest_money",
	NetworkBonus:     "network_bonus",
	EquityBonus:      "equity_bonus",
	OldGroupId:       "old_group_id",
	Logo:             "logo",
	NetworkBonusPond: "network_bonus_pond",
	EquityBonusPond:  "equity_bonus_pond",
	PjBonus:          "pj_bonus",
	Status:           "status",
}

// NewKcodeUserJobDao creates and returns a new DAO object for table data access.
func NewKcodeUserJobDao() *KcodeUserJobDao {
	return &KcodeUserJobDao{
		group:   "default",
		table:   "kcode_user_job",
		columns: kcodeUserJobColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserJobDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserJobDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserJobDao) Columns() KcodeUserJobColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserJobDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserJobDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserJobDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
