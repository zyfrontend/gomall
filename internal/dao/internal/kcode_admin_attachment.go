// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeAdminAttachmentDao is the data access object for table kcode_admin_attachment.
type KcodeAdminAttachmentDao struct {
	table   string                      // table is the underlying table name of the DAO.
	group   string                      // group is the database configuration group name of current DAO.
	columns KcodeAdminAttachmentColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeAdminAttachmentColumns defines and stores column names for table kcode_admin_attachment.
type KcodeAdminAttachmentColumns struct {
	Id         string //
	Uid        string // 用户id
	Name       string // 文件名
	Module     string // 模块名，由哪个模块上传的
	Path       string // 文件路径
	Thumb      string // 缩略图路径
	Url        string // 文件链接
	Mime       string // 文件mime类型
	Ext        string // 文件类型
	Size       string // 文件大小
	Md5        string // 文件md5
	Sha1       string // sha1 散列值
	Driver     string // 上传驱动
	Download   string // 下载次数
	CreateTime string // 上传时间
	UpdateTime string // 更新时间
	Sort       string // 排序
	Status     string // 状态
	Width      string // 图片宽度
	Height     string // 图片高度
}

// kcodeAdminAttachmentColumns holds the columns for table kcode_admin_attachment.
var kcodeAdminAttachmentColumns = KcodeAdminAttachmentColumns{
	Id:         "id",
	Uid:        "uid",
	Name:       "name",
	Module:     "module",
	Path:       "path",
	Thumb:      "thumb",
	Url:        "url",
	Mime:       "mime",
	Ext:        "ext",
	Size:       "size",
	Md5:        "md5",
	Sha1:       "sha1",
	Driver:     "driver",
	Download:   "download",
	CreateTime: "create_time",
	UpdateTime: "update_time",
	Sort:       "sort",
	Status:     "status",
	Width:      "width",
	Height:     "height",
}

// NewKcodeAdminAttachmentDao creates and returns a new DAO object for table data access.
func NewKcodeAdminAttachmentDao() *KcodeAdminAttachmentDao {
	return &KcodeAdminAttachmentDao{
		group:   "default",
		table:   "kcode_admin_attachment",
		columns: kcodeAdminAttachmentColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeAdminAttachmentDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeAdminAttachmentDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeAdminAttachmentDao) Columns() KcodeAdminAttachmentColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeAdminAttachmentDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeAdminAttachmentDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeAdminAttachmentDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
