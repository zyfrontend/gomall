// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeAdminModuleDao is the data access object for table kcode_admin_module.
type KcodeAdminModuleDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns KcodeAdminModuleColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeAdminModuleColumns defines and stores column names for table kcode_admin_module.
type KcodeAdminModuleColumns struct {
	Id           string //
	Name         string // 模块名称（标识）
	Title        string // 模块标题
	Icon         string // 图标
	Description  string // 描述
	Author       string // 作者
	AuthorUrl    string // 作者主页
	Config       string // 配置信息
	Access       string // 授权配置
	Version      string // 版本号
	Identifier   string // 模块唯一标识符
	SystemModule string // 是否为系统模块
	CreateTime   string // 创建时间
	UpdateTime   string // 更新时间
	Sort         string // 排序
	Status       string // 状态
}

// kcodeAdminModuleColumns holds the columns for table kcode_admin_module.
var kcodeAdminModuleColumns = KcodeAdminModuleColumns{
	Id:           "id",
	Name:         "name",
	Title:        "title",
	Icon:         "icon",
	Description:  "description",
	Author:       "author",
	AuthorUrl:    "author_url",
	Config:       "config",
	Access:       "access",
	Version:      "version",
	Identifier:   "identifier",
	SystemModule: "system_module",
	CreateTime:   "create_time",
	UpdateTime:   "update_time",
	Sort:         "sort",
	Status:       "status",
}

// NewKcodeAdminModuleDao creates and returns a new DAO object for table data access.
func NewKcodeAdminModuleDao() *KcodeAdminModuleDao {
	return &KcodeAdminModuleDao{
		group:   "default",
		table:   "kcode_admin_module",
		columns: kcodeAdminModuleColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeAdminModuleDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeAdminModuleDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeAdminModuleDao) Columns() KcodeAdminModuleColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeAdminModuleDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeAdminModuleDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeAdminModuleDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
