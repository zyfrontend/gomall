// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserTokenDao is the data access object for table kcode_user_token.
type KcodeUserTokenDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns KcodeUserTokenColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserTokenColumns defines and stores column names for table kcode_user_token.
type KcodeUserTokenColumns struct {
	Id           string //
	UserId       string // 用户userid
	Token        string //
	LoginTime    string // 登录时间
	LoginIp      string // 登录IP地址
	LoginOs      string // 登录操作系统
	LoginBrowser string // 登录浏览器
	ExpireTime   string // 有效期
	LoginType    string // 登录类型 0 未知 1 网页 2.移动端网页 3.app
}

// kcodeUserTokenColumns holds the columns for table kcode_user_token.
var kcodeUserTokenColumns = KcodeUserTokenColumns{
	Id:           "id",
	UserId:       "user_id",
	Token:        "token",
	LoginTime:    "login_time",
	LoginIp:      "login_ip",
	LoginOs:      "login_os",
	LoginBrowser: "login_browser",
	ExpireTime:   "expire_time",
	LoginType:    "login_type",
}

// NewKcodeUserTokenDao creates and returns a new DAO object for table data access.
func NewKcodeUserTokenDao() *KcodeUserTokenDao {
	return &KcodeUserTokenDao{
		group:   "default",
		table:   "kcode_user_token",
		columns: kcodeUserTokenColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserTokenDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserTokenDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserTokenDao) Columns() KcodeUserTokenColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserTokenDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserTokenDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserTokenDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
