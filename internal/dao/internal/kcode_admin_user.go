// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeAdminUserDao is the data access object for table kcode_admin_user.
type KcodeAdminUserDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns KcodeAdminUserColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeAdminUserColumns defines and stores column names for table kcode_admin_user.
type KcodeAdminUserColumns struct {
	Id            string //
	Username      string // 用户名
	Nickname      string // 昵称
	Password      string // 密码
	Email         string // 邮箱地址
	EmailBind     string // 是否绑定邮箱地址
	Mobile        string // 手机号码
	MobileBind    string // 是否绑定手机号码
	Avatar        string // 头像
	Money         string // 余额
	Score         string // 积分
	Role          string // 主角色ID
	Roles         string // 副角色ID
	Group         string // 部门id
	SignupIp      string // 注册ip
	CreateTime    string // 创建时间
	UpdateTime    string // 更新时间
	LastLoginTime string // 最后一次登录时间
	LastLoginIp   string // 登录ip
	Sort          string // 排序
	Status        string // 状态：0禁用，1启用
	Secret        string // 谷歌验证器秘钥
}

// kcodeAdminUserColumns holds the columns for table kcode_admin_user.
var kcodeAdminUserColumns = KcodeAdminUserColumns{
	Id:            "id",
	Username:      "username",
	Nickname:      "nickname",
	Password:      "password",
	Email:         "email",
	EmailBind:     "email_bind",
	Mobile:        "mobile",
	MobileBind:    "mobile_bind",
	Avatar:        "avatar",
	Money:         "money",
	Score:         "score",
	Role:          "role",
	Roles:         "roles",
	Group:         "group",
	SignupIp:      "signup_ip",
	CreateTime:    "create_time",
	UpdateTime:    "update_time",
	LastLoginTime: "last_login_time",
	LastLoginIp:   "last_login_ip",
	Sort:          "sort",
	Status:        "status",
	Secret:        "secret",
}

// NewKcodeAdminUserDao creates and returns a new DAO object for table data access.
func NewKcodeAdminUserDao() *KcodeAdminUserDao {
	return &KcodeAdminUserDao{
		group:   "default",
		table:   "kcode_admin_user",
		columns: kcodeAdminUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeAdminUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeAdminUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeAdminUserDao) Columns() KcodeAdminUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeAdminUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeAdminUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeAdminUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
