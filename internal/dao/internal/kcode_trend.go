// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeTrendDao is the data access object for table kcode_trend.
type KcodeTrendDao struct {
	table   string            // table is the underlying table name of the DAO.
	group   string            // group is the database configuration group name of current DAO.
	columns KcodeTrendColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeTrendColumns defines and stores column names for table kcode_trend.
type KcodeTrendColumns struct {
	Id        string //
	MoneyType string //
	Today     string //
	Hour      string //
	V         string // 开盘价
}

// kcodeTrendColumns holds the columns for table kcode_trend.
var kcodeTrendColumns = KcodeTrendColumns{
	Id:        "id",
	MoneyType: "money_type",
	Today:     "today",
	Hour:      "hour",
	V:         "v",
}

// NewKcodeTrendDao creates and returns a new DAO object for table data access.
func NewKcodeTrendDao() *KcodeTrendDao {
	return &KcodeTrendDao{
		group:   "default",
		table:   "kcode_trend",
		columns: kcodeTrendColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeTrendDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeTrendDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeTrendDao) Columns() KcodeTrendColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeTrendDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeTrendDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeTrendDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
