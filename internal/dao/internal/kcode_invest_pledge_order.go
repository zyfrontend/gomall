// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeInvestPledgeOrderDao is the data access object for table kcode_invest_pledge_order.
type KcodeInvestPledgeOrderDao struct {
	table   string                        // table is the underlying table name of the DAO.
	group   string                        // group is the database configuration group name of current DAO.
	columns KcodeInvestPledgeOrderColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeInvestPledgeOrderColumns defines and stores column names for table kcode_invest_pledge_order.
type KcodeInvestPledgeOrderColumns struct {
	OrderId         string //
	AddTime         string //
	OrderSn         string //
	UserId          string //
	PayStatus       string // 1已支付0未支付
	MoneyType       string //
	OrderMoney      string // 投资金额
	OrderType       string // 1质押 2激活
	ExpandNum       string // 收益倍数
	TokenDayMoney   string // 今日收益
	TokenCountMoney string // 累计收益
	ReturnCountDay  string // 累计释放天数
	SetDayTime      string // 最后释放时间
	Status          string // 1质押中 0闲置中 2已赎回 3已分红完
	PayHash         string // 付款hash
	PayTime         string // 付款时间
	RedeTime        string // 赎回时间
	HashRemark      string //
	TotalIncome     string // 翻倍后总收益
	TopOrderId      string //
	ResidualIncome  string // 剩余收益
	OrderUsdt       string // 实际投资USDT
	Hash            string // 付款hash
	CoinPrice       string // 当前比价
	UsdtMoney       string // 新版记录（仅页面回显用到）
	TotalIncomeUsdt string // 总收益 U
	ResidualUsdt    string // 剩余收益 u
	Line            string // 1排队中 0未排队
	PaiTime         string // 排队时间
}

// kcodeInvestPledgeOrderColumns holds the columns for table kcode_invest_pledge_order.
var kcodeInvestPledgeOrderColumns = KcodeInvestPledgeOrderColumns{
	OrderId:         "order_id",
	AddTime:         "add_time",
	OrderSn:         "order_sn",
	UserId:          "user_id",
	PayStatus:       "pay_status",
	MoneyType:       "money_type",
	OrderMoney:      "order_money",
	OrderType:       "order_type",
	ExpandNum:       "expand_num",
	TokenDayMoney:   "token_day_money",
	TokenCountMoney: "token_count_money",
	ReturnCountDay:  "return_count_day",
	SetDayTime:      "set_day_time",
	Status:          "status",
	PayHash:         "pay_hash",
	PayTime:         "pay_time",
	RedeTime:        "rede_time",
	HashRemark:      "hash_remark",
	TotalIncome:     "total_income",
	TopOrderId:      "top_order_id",
	ResidualIncome:  "residual_income",
	OrderUsdt:       "order_usdt",
	Hash:            "hash",
	CoinPrice:       "coin_price",
	UsdtMoney:       "usdt_money",
	TotalIncomeUsdt: "total_income_usdt",
	ResidualUsdt:    "residual_usdt",
	Line:            "line",
	PaiTime:         "pai_time",
}

// NewKcodeInvestPledgeOrderDao creates and returns a new DAO object for table data access.
func NewKcodeInvestPledgeOrderDao() *KcodeInvestPledgeOrderDao {
	return &KcodeInvestPledgeOrderDao{
		group:   "default",
		table:   "kcode_invest_pledge_order",
		columns: kcodeInvestPledgeOrderColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeInvestPledgeOrderDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeInvestPledgeOrderDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeInvestPledgeOrderDao) Columns() KcodeInvestPledgeOrderColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeInvestPledgeOrderDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeInvestPledgeOrderDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeInvestPledgeOrderDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
