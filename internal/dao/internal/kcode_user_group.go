// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserGroupDao is the data access object for table kcode_user_group.
type KcodeUserGroupDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns KcodeUserGroupColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserGroupColumns defines and stores column names for table kcode_user_group.
type KcodeUserGroupColumns struct {
	GroupId          string // 级别id
	GroupName        string // 级别名称
	UpZtNum          string // 升级需要的直推人数
	ZtBuyNum         string // 直推业绩
	BuyNum           string // 升级需要的个人业绩
	TeamBuyNum       string // 升级需要的团队业绩
	UpTeamNum        string // 升级需要的团队人数
	UpTeamGroup      string // 升级需要的团队会员级别要求
	TeamBonus        string // 团队奖比例
	ZtValidAccount   string // 直推有效账号人数
	ShareProfits     string // 分红
	CreateTime       string // 创建时间
	UpdateTime       string // 最后更新时间
	TeamProfitsFloor string // 团队奖层级奖励
	ExchangeFee      string // 内部交易所手续费
	RewardRules      string // 奖励规则
	Logo             string //
}

// kcodeUserGroupColumns holds the columns for table kcode_user_group.
var kcodeUserGroupColumns = KcodeUserGroupColumns{
	GroupId:          "group_id",
	GroupName:        "group_name",
	UpZtNum:          "up_zt_num",
	ZtBuyNum:         "zt_buy_num",
	BuyNum:           "buy_num",
	TeamBuyNum:       "team_buy_num",
	UpTeamNum:        "up_team_num",
	UpTeamGroup:      "up_team_group",
	TeamBonus:        "team_bonus",
	ZtValidAccount:   "zt_valid_account",
	ShareProfits:     "share_profits",
	CreateTime:       "create_time",
	UpdateTime:       "update_time",
	TeamProfitsFloor: "team_profits_floor",
	ExchangeFee:      "exchange_fee",
	RewardRules:      "reward_rules",
	Logo:             "logo",
}

// NewKcodeUserGroupDao creates and returns a new DAO object for table data access.
func NewKcodeUserGroupDao() *KcodeUserGroupDao {
	return &KcodeUserGroupDao{
		group:   "default",
		table:   "kcode_user_group",
		columns: kcodeUserGroupColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserGroupDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserGroupDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserGroupDao) Columns() KcodeUserGroupColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserGroupDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserGroupDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserGroupDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
