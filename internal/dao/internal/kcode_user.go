// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserDao is the data access object for table kcode_user.
type KcodeUserDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns KcodeUserColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserColumns defines and stores column names for table kcode_user.
type KcodeUserColumns struct {
	UserId          string // 用户user_id
	JobId           string // 节点级别
	GroupId         string // 会员级别
	InviterCode     string // 邀请码
	UserType        string // 用户类型
	Address         string // 用户钱包地址
	Username        string // 用户名
	Nickname        string // 昵称
	Salt            string // 密码加密字符
	Password        string // 密码
	Payword         string // 支付密码
	Mobile          string // 手机号码
	MobileBind      string // 是否绑定手机号码
	Email           string // 用户邮箱地址
	EmailBind       string // 是否绑定邮箱地址
	Avatar          string // 头像
	RegIp           string // 注册ip
	CreateTime      string // 注册时间
	UpdateTime      string // 最后更新时间
	LastLoginIp     string // 最后登录IP
	LastLoginTime   string // 最后登录时间
	OpenTime        string // 会员开通时间
	OpenStatus      string // 会员开通状态 0 未开通 1 已经开通
	InviterUsername string // 邀请人用户名
	Inviters        string // 邀请人集合
	InviterId       string // 邀请人id
	IsAtm           string // 当前帐号是否可以提现 1 可以提现 0 不可以提现
	IsLogin         string // 1 可以登录 0冻结禁止登录
	LoginNum        string // 登录次数
	Age             string // 年龄
	Sex             string // 性别 0 保密 1 男 2 女
	AvatarImg       string // 图片URL地址
	IsFrozen        string // 0 默认 1 冻结
	IsDel           string // 注销 0 是否删除  1 删除注销
	IsTeam          string // 是否绑定微信
	Floor           string // 层数
	ZtNum           string // 直推人数
	TeamNum         string // 团队人数
	BuyNum          string // 累计投资USDT数量
	TeamBuyNum      string // 团队累计投资USDT数量
	BuyNumUsdt      string // 个人业绩（U）
	TeamBuyNumUsdt  string // 团队业绩（U）
	IfEffer         string // 是否是有效用户
	IsAd            string // 1今日看过广告
	TokenBuyNum     string // 累计投资换算hvt数量
	Suanli          string // 用户算力
}

// kcodeUserColumns holds the columns for table kcode_user.
var kcodeUserColumns = KcodeUserColumns{
	UserId:          "user_id",
	JobId:           "job_id",
	GroupId:         "group_id",
	InviterCode:     "inviter_code",
	UserType:        "user_type",
	Address:         "address",
	Username:        "username",
	Nickname:        "nickname",
	Salt:            "salt",
	Password:        "password",
	Payword:         "payword",
	Mobile:          "mobile",
	MobileBind:      "mobile_bind",
	Email:           "email",
	EmailBind:       "email_bind",
	Avatar:          "avatar",
	RegIp:           "reg_ip",
	CreateTime:      "create_time",
	UpdateTime:      "update_time",
	LastLoginIp:     "last_login_ip",
	LastLoginTime:   "last_login_time",
	OpenTime:        "open_time",
	OpenStatus:      "open_status",
	InviterUsername: "inviter_username",
	Inviters:        "inviters",
	InviterId:       "inviter_id",
	IsAtm:           "is_atm",
	IsLogin:         "is_login",
	LoginNum:        "login_num",
	Age:             "age",
	Sex:             "sex",
	AvatarImg:       "avatar_img",
	IsFrozen:        "is_frozen",
	IsDel:           "is_del",
	IsTeam:          "is_team",
	Floor:           "floor",
	ZtNum:           "zt_num",
	TeamNum:         "team_num",
	BuyNum:          "buy_num",
	TeamBuyNum:      "team_buy_num",
	BuyNumUsdt:      "buy_num_usdt",
	TeamBuyNumUsdt:  "team_buy_num_usdt",
	IfEffer:         "if_effer",
	IsAd:            "is_ad",
	TokenBuyNum:     "token_buy_num",
	Suanli:          "suanli",
}

// NewKcodeUserDao creates and returns a new DAO object for table data access.
func NewKcodeUserDao() *KcodeUserDao {
	return &KcodeUserDao{
		group:   "default",
		table:   "kcode_user",
		columns: kcodeUserColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserDao) Columns() KcodeUserColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
