// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeWithdrawalsDao is the data access object for table kcode_withdrawals.
type KcodeWithdrawalsDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns KcodeWithdrawalsColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeWithdrawalsColumns defines and stores column names for table kcode_withdrawals.
type KcodeWithdrawalsColumns struct {
	Id           string // id
	UserId       string // 用户id
	AtmMoney     string // 申请金额
	AtmMoneyType string // 币种类型
	TaxFee       string // 税收手续费
	Money        string // 到账金额
	Status       string // 状态：0申请中1审核通过2审核失败
	TransStatus  string // '待确认','已到账','到账失败'
	CreateTime   string // 申请时间
	CheckTime    string // 审核时间
	RefuseTime   string // 拒绝时间
	AtmAddress   string // 转账钱包地址
	ChainName    string // 链名称
	AtmQrCode    string // 二维码
	Hash         string //
	Chain        string // 链ID
	ErrorMsg     string //
}

// kcodeWithdrawalsColumns holds the columns for table kcode_withdrawals.
var kcodeWithdrawalsColumns = KcodeWithdrawalsColumns{
	Id:           "id",
	UserId:       "user_id",
	AtmMoney:     "atm_money",
	AtmMoneyType: "atm_money_type",
	TaxFee:       "tax_fee",
	Money:        "money",
	Status:       "status",
	TransStatus:  "trans_status",
	CreateTime:   "create_time",
	CheckTime:    "check_time",
	RefuseTime:   "refuse_time",
	AtmAddress:   "atm_address",
	ChainName:    "chain_name",
	AtmQrCode:    "atm_qr_code",
	Hash:         "hash",
	Chain:        "chain",
	ErrorMsg:     "error_msg",
}

// NewKcodeWithdrawalsDao creates and returns a new DAO object for table data access.
func NewKcodeWithdrawalsDao() *KcodeWithdrawalsDao {
	return &KcodeWithdrawalsDao{
		group:   "default",
		table:   "kcode_withdrawals",
		columns: kcodeWithdrawalsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeWithdrawalsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeWithdrawalsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeWithdrawalsDao) Columns() KcodeWithdrawalsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeWithdrawalsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeWithdrawalsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeWithdrawalsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
