// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeCensusLogDao is the data access object for table kcode_census_log.
type KcodeCensusLogDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns KcodeCensusLogColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeCensusLogColumns defines and stores column names for table kcode_census_log.
type KcodeCensusLogColumns struct {
	LogId         string //
	UserId        string //
	MoneyType     string // 币种
	AddTime       string // 添加时间
	RechargeMoney string // 充值金额
	AtmMoney      string // 提现金额
	ZhituiBonus   string // 直推奖励
	TeamBonus     string // 团队奖励
	WholeBonus    string // 全网加权分红
	EquityBonus   string // 权益分红
	ReleaseBonus  string // 释放收益
	PjBonus       string // 平级奖
}

// kcodeCensusLogColumns holds the columns for table kcode_census_log.
var kcodeCensusLogColumns = KcodeCensusLogColumns{
	LogId:         "log_id",
	UserId:        "user_id",
	MoneyType:     "money_type",
	AddTime:       "add_time",
	RechargeMoney: "recharge_money",
	AtmMoney:      "atm_money",
	ZhituiBonus:   "zhitui_bonus",
	TeamBonus:     "team_bonus",
	WholeBonus:    "whole_bonus",
	EquityBonus:   "equity_bonus",
	ReleaseBonus:  "release_bonus",
	PjBonus:       "pj_bonus",
}

// NewKcodeCensusLogDao creates and returns a new DAO object for table data access.
func NewKcodeCensusLogDao() *KcodeCensusLogDao {
	return &KcodeCensusLogDao{
		group:   "default",
		table:   "kcode_census_log",
		columns: kcodeCensusLogColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeCensusLogDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeCensusLogDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeCensusLogDao) Columns() KcodeCensusLogColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeCensusLogDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeCensusLogDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeCensusLogDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
