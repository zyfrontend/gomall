// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserMoneyDao is the data access object for table kcode_user_money.
type KcodeUserMoneyDao struct {
	table   string                // table is the underlying table name of the DAO.
	group   string                // group is the database configuration group name of current DAO.
	columns KcodeUserMoneyColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserMoneyColumns defines and stores column names for table kcode_user_money.
type KcodeUserMoneyColumns struct {
	Id               string //
	UserId           string //
	AMoney           string //
	UsdtMoney        string //
	BMoney           string //
	SetLastTime      string // 最后结算的时间
	SetLastDate      string // 最后结算的日期
	SetDayTime       string // 订单下次可以结算的日期
	ReturnCountDay   string // 已经发放天数
	ReturnCountMoney string // 发放总额
	ReturnMaxDay     string // 发放天数
	Status           string // 私募奖励发放是否到期
	MoneyId          string // 币种id
	Balance          string //
}

// kcodeUserMoneyColumns holds the columns for table kcode_user_money.
var kcodeUserMoneyColumns = KcodeUserMoneyColumns{
	Id:               "id",
	UserId:           "user_id",
	AMoney:           "a_money",
	UsdtMoney:        "usdt_money",
	BMoney:           "b_money",
	SetLastTime:      "set_last_time",
	SetLastDate:      "set_last_date",
	SetDayTime:       "set_day_time",
	ReturnCountDay:   "return_count_day",
	ReturnCountMoney: "return_count_money",
	ReturnMaxDay:     "return_max_day",
	Status:           "status",
	MoneyId:          "money_id",
	Balance:          "balance",
}

// NewKcodeUserMoneyDao creates and returns a new DAO object for table data access.
func NewKcodeUserMoneyDao() *KcodeUserMoneyDao {
	return &KcodeUserMoneyDao{
		group:   "default",
		table:   "kcode_user_money",
		columns: kcodeUserMoneyColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserMoneyDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserMoneyDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserMoneyDao) Columns() KcodeUserMoneyColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserMoneyDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserMoneyDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserMoneyDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
