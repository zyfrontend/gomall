// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeUserMoneyTypeDao is the data access object for table kcode_user_money_type.
type KcodeUserMoneyTypeDao struct {
	table   string                    // table is the underlying table name of the DAO.
	group   string                    // group is the database configuration group name of current DAO.
	columns KcodeUserMoneyTypeColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeUserMoneyTypeColumns defines and stores column names for table kcode_user_money_type.
type KcodeUserMoneyTypeColumns struct {
	Id              string //
	Icon            string // 币种图标
	Name            string // 币种英文标识
	EnName          string // 币种英文名字
	CnName          string // 币种中文名字
	IsSystem        string // 系统变量
	IsTransfer      string // 是否允许转账
	IsAdmRecharge   string // 是否允许后台充值
	IsUserRecharge  string // 是否允许用户充值
	IsAtm           string // 是否可以提现
	ExchangeRate    string // 币价（$）
	IsExchange      string // 是否可以兑换
	Status          string // 状态 0禁用  1启用
	ContractAddress string // 代币合约地址
	MinAtmMoney     string // 最低提现金额
	AtmFee          string // 提现手续费
	AtmTips         string // 提现说明
	TokenAbi        string // 币种的token_abi
	WithdrawRatio   string // 可提现比例
	WithdrawDays    string // 提现间隔天数
	Decimals        string // 精度
	WalletAddress   string // 收款钱包地址
	AutoMoeny       string // 自动审核
	MaxAtmMoney     string // 最高提现金额
	Date1           string // 提现开始时间
	Date2           string // 提现结束时间
	IsSell          string // 是否开启出售
	SellPrice       string // 最低多少起售
	WithdrawAddress string // 提现钱包地址
	WithdrawKey     string // 提现钱包加密私钥
	Port            string // node服务断开（不能重复）
	Zhou            string // 周提现
	RangeAbility    string // 涨跌幅
	TransactionPair string // 交易对
}

// kcodeUserMoneyTypeColumns holds the columns for table kcode_user_money_type.
var kcodeUserMoneyTypeColumns = KcodeUserMoneyTypeColumns{
	Id:              "id",
	Icon:            "icon",
	Name:            "name",
	EnName:          "en_name",
	CnName:          "cn_name",
	IsSystem:        "is_system",
	IsTransfer:      "is_transfer",
	IsAdmRecharge:   "is_adm_recharge",
	IsUserRecharge:  "is_user_recharge",
	IsAtm:           "is_atm",
	ExchangeRate:    "exchange_rate",
	IsExchange:      "is_exchange",
	Status:          "status",
	ContractAddress: "contract_address",
	MinAtmMoney:     "min_atm_money",
	AtmFee:          "atm_fee",
	AtmTips:         "atm_tips",
	TokenAbi:        "token_abi",
	WithdrawRatio:   "withdraw_ratio",
	WithdrawDays:    "withdraw_days",
	Decimals:        "decimals",
	WalletAddress:   "wallet_address",
	AutoMoeny:       "auto_moeny",
	MaxAtmMoney:     "max_atm_money",
	Date1:           "date1",
	Date2:           "date2",
	IsSell:          "is_sell",
	SellPrice:       "sell_price",
	WithdrawAddress: "withdraw_address",
	WithdrawKey:     "withdraw_key",
	Port:            "port",
	Zhou:            "zhou",
	RangeAbility:    "range_ability",
	TransactionPair: "transaction_pair",
}

// NewKcodeUserMoneyTypeDao creates and returns a new DAO object for table data access.
func NewKcodeUserMoneyTypeDao() *KcodeUserMoneyTypeDao {
	return &KcodeUserMoneyTypeDao{
		group:   "default",
		table:   "kcode_user_money_type",
		columns: kcodeUserMoneyTypeColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeUserMoneyTypeDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeUserMoneyTypeDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeUserMoneyTypeDao) Columns() KcodeUserMoneyTypeColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeUserMoneyTypeDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeUserMoneyTypeDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeUserMoneyTypeDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
