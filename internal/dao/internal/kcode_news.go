// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeNewsDao is the data access object for table kcode_news.
type KcodeNewsDao struct {
	table   string           // table is the underlying table name of the DAO.
	group   string           // group is the database configuration group name of current DAO.
	columns KcodeNewsColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeNewsColumns defines and stores column names for table kcode_news.
type KcodeNewsColumns struct {
	Id         string //
	TypeId     string // 类型ID
	Title      string // 标题
	TitleEn    string //
	TitleTw    string //
	Keysword   string // 关键词
	Introduce  string // 介绍
	ContentEn  string // 英文介绍
	ContentTw  string // 繁体介绍
	Content    string // 新闻内容
	Sort       string // 排序
	CreateTime string // 添加日期
	UpdateTime string // 修改日期
	Status     string // 1开启 0关闭
	Addperson  string // 添加者
	Flag       string // 文章属性
	Click      string // 点击数量
	Image      string // 公共的图片地址
	PcImage    string // pc缩略图
	WapImage   string // 手机端缩略图
	JumpUrl    string // 跳转的地址,如果不填，讲会跳转到平台自己的地址
	IsIndex    string // 是否显示在首页，0=不显示，1=显示
}

// kcodeNewsColumns holds the columns for table kcode_news.
var kcodeNewsColumns = KcodeNewsColumns{
	Id:         "id",
	TypeId:     "type_id",
	Title:      "title",
	TitleEn:    "title_en",
	TitleTw:    "title_tw",
	Keysword:   "keysword",
	Introduce:  "introduce",
	ContentEn:  "content_en",
	ContentTw:  "content_tw",
	Content:    "content",
	Sort:       "sort",
	CreateTime: "create_time",
	UpdateTime: "update_time",
	Status:     "status",
	Addperson:  "addperson",
	Flag:       "flag",
	Click:      "click",
	Image:      "image",
	PcImage:    "pc_image",
	WapImage:   "wap_image",
	JumpUrl:    "jump_url",
	IsIndex:    "is_index",
}

// NewKcodeNewsDao creates and returns a new DAO object for table data access.
func NewKcodeNewsDao() *KcodeNewsDao {
	return &KcodeNewsDao{
		group:   "default",
		table:   "kcode_news",
		columns: kcodeNewsColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeNewsDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeNewsDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeNewsDao) Columns() KcodeNewsColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeNewsDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeNewsDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeNewsDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
