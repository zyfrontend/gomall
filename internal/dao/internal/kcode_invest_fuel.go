// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeInvestFuelDao is the data access object for table kcode_invest_fuel.
type KcodeInvestFuelDao struct {
	table   string                 // table is the underlying table name of the DAO.
	group   string                 // group is the database configuration group name of current DAO.
	columns KcodeInvestFuelColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeInvestFuelColumns defines and stores column names for table kcode_invest_fuel.
type KcodeInvestFuelColumns struct {
	Id              string //
	AddTime         string //
	UserId          string //
	TokenDayMoney   string // 今日收益
	TokenCountMoney string // 累计收益
	ReturnCountDay  string // 累计释放天数
	SetDayTime      string // 最后释放时间
	TotalIncome     string // 总收益
	ResidualIncome  string // 剩余收益
	UpdateTime      string //
	ProgressBar     string // 进度条
}

// kcodeInvestFuelColumns holds the columns for table kcode_invest_fuel.
var kcodeInvestFuelColumns = KcodeInvestFuelColumns{
	Id:              "id",
	AddTime:         "add_time",
	UserId:          "user_id",
	TokenDayMoney:   "token_day_money",
	TokenCountMoney: "token_count_money",
	ReturnCountDay:  "return_count_day",
	SetDayTime:      "set_day_time",
	TotalIncome:     "total_income",
	ResidualIncome:  "residual_income",
	UpdateTime:      "update_time",
	ProgressBar:     "progress_bar",
}

// NewKcodeInvestFuelDao creates and returns a new DAO object for table data access.
func NewKcodeInvestFuelDao() *KcodeInvestFuelDao {
	return &KcodeInvestFuelDao{
		group:   "default",
		table:   "kcode_invest_fuel",
		columns: kcodeInvestFuelColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeInvestFuelDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeInvestFuelDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeInvestFuelDao) Columns() KcodeInvestFuelColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeInvestFuelDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeInvestFuelDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeInvestFuelDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
