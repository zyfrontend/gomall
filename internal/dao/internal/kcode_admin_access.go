// ==========================================================================
// Code generated by GoFrame CLI tool. DO NOT EDIT.
// ==========================================================================

package internal

import (
	"context"

	"github.com/gogf/gf/v2/database/gdb"
	"github.com/gogf/gf/v2/frame/g"
)

// KcodeAdminAccessDao is the data access object for table kcode_admin_access.
type KcodeAdminAccessDao struct {
	table   string                  // table is the underlying table name of the DAO.
	group   string                  // group is the database configuration group name of current DAO.
	columns KcodeAdminAccessColumns // columns contains all the column names of Table for convenient usage.
}

// KcodeAdminAccessColumns defines and stores column names for table kcode_admin_access.
type KcodeAdminAccessColumns struct {
	Module string // 模型名称
	Group  string // 权限分组标识
	Uid    string // 用户id
	Nid    string // 授权节点id
	Tag    string // 分组标签
}

// kcodeAdminAccessColumns holds the columns for table kcode_admin_access.
var kcodeAdminAccessColumns = KcodeAdminAccessColumns{
	Module: "module",
	Group:  "group",
	Uid:    "uid",
	Nid:    "nid",
	Tag:    "tag",
}

// NewKcodeAdminAccessDao creates and returns a new DAO object for table data access.
func NewKcodeAdminAccessDao() *KcodeAdminAccessDao {
	return &KcodeAdminAccessDao{
		group:   "default",
		table:   "kcode_admin_access",
		columns: kcodeAdminAccessColumns,
	}
}

// DB retrieves and returns the underlying raw database management object of current DAO.
func (dao *KcodeAdminAccessDao) DB() gdb.DB {
	return g.DB(dao.group)
}

// Table returns the table name of current dao.
func (dao *KcodeAdminAccessDao) Table() string {
	return dao.table
}

// Columns returns all column names of current dao.
func (dao *KcodeAdminAccessDao) Columns() KcodeAdminAccessColumns {
	return dao.columns
}

// Group returns the configuration group name of database of current dao.
func (dao *KcodeAdminAccessDao) Group() string {
	return dao.group
}

// Ctx creates and returns the Model for current DAO, It automatically sets the context for current operation.
func (dao *KcodeAdminAccessDao) Ctx(ctx context.Context) *gdb.Model {
	return dao.DB().Model(dao.table).Safe().Ctx(ctx)
}

// Transaction wraps the transaction logic using function f.
// It rollbacks the transaction and returns the error from function f if it returns non-nil error.
// It commits the transaction and returns nil if function f returns nil.
//
// Note that, you should not Commit or Rollback the transaction in function f
// as it is automatically handled by this function.
func (dao *KcodeAdminAccessDao) Transaction(ctx context.Context, f func(ctx context.Context, tx gdb.TX) error) (err error) {
	return dao.Ctx(ctx).Transaction(ctx, f)
}
